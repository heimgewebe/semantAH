name: ci
on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:
    inputs:
      toolchain:
        description: "Rust toolchain channel (for example, stable or nightly)"
        required: false
        default: stable
  workflow_call:
    inputs:
      toolchain:
        description: "Rust toolchain channel (for example, stable or nightly)"
        required: false
        type: string
        default: stable
  schedule:
    - cron: "17 4 * * 1"   # Mondays 04:17 UTC: weekly audit/smoke

env:
  DEFAULT_RUST_TOOLCHAIN: stable

jobs:
  rust:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1
      RUST_TOOLCHAIN: ${{ inputs.toolchain || env.DEFAULT_RUST_TOOLCHAIN }}
    steps:
      - uses: actions/checkout@v4

      # Maintained toolchain action
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true
          components: clippy rustfmt

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Cargo fmt
        run: cargo fmt --all -- --check

      - name: Cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build
        env:
          RUSTFLAGS: -D warnings
        run: cargo build --workspace --all-features --locked

      - name: Test
        env:
          RUSTFLAGS: -D warnings
        run: cargo test --workspace --all-features --locked -- --nocapture

      - name: Cache cargo advisory DB
        uses: actions/cache@v4
        with:
          path: ~/.cargo/advisory-db
          key: advisory-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Security audit (with retry)
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 4
          retry_wait_seconds: 30
          command: cargo audit

  python-pipeline:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup uv (Python)
        uses: astral-sh/setup-uv@v4
        with:
          python-version: "3.11"

      - name: uv cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ runner.os }}-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Sync env
        run: uv sync --frozen

      - name: Tests
        run: uv run pytest -q

      - name: Demo run (no network)
        if: github.event_name != 'schedule'
        env:
          PYTHONWARNINGS: ignore
        run: |
          make -n all
          make demo

      - name: Scheduled demo run (best effort)
        if: github.event_name == 'schedule'
        continue-on-error: true
        env:
          PYTHONWARNINGS: ignore
        run: |
          make -n all
          make demo
